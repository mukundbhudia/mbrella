<!DOCTYPE html>
<html id="html-all" lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title data-bind="text: 'The weather in ' + cityName()"></title>

    <!-- Bootstrap core CSS -->
    <link href="/stylesheets/bootstrap.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="/stylesheets/home.css" rel="stylesheet">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>

<body>

    <!-- Static navbar -->
    <nav class="navbar navbar-purp navbar-static-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">{{title}}</a>
            </div>
            <div id="navbar" class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="/">Home</a></li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    {{#userEmail}}
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">My cities <span class="caret"></span></a>
                        <ul class="dropdown-menu" role="menu">
                            {{#userFavCities}}
                            <li role="presentation"><a role="menuitem" href="/weather/#/{{cityID}}">{{cityName}}</a></li>
                            {{/userFavCities}}
                            {{^userFavCities}}
                            <li role="presentation" class="dropdown-header">
                                No cities. <br> View your settings to add cities.
                            </li>
                            {{/userFavCities}}
                        </ul>
                    </li>
                    <li class="dropdown">
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">{{firstName}} <span class="caret"></span></a>
                        <ul class="dropdown-menu" role="menu">
                            <li role="presentation"><a role="menuitem" href="/myweather">My Weather</a></li>
                            <li role="presentation"><a role="menuitem" href="/myweather/user">Settings</a></li>
                            <li class="divider"></li>
                            <li role="presentation"><a role="menuitem" href="/logout">Logout</a></li>
                        </ul>
                    </li>
                    {{/userEmail}}
                    {{^userEmail}}
                    <li><a href="/signup">Sign up</a></li>
                    <li><a href="/login">Login</a></li>
                    {{/userEmail}}
                </ul>
                <div class="navbar-form navbar-right">
                    <input type="text" class="typeahead form-control" id="citySearch" placeholder="Enter a city name..." autocomplete="off">
                </div>
            </div><!--/.nav-collapse -->
        </div>
    </nav>

    <div data-bind="visible: getError() == 0" class="container">
        <h3>Enter a city in the search bar above to find the weather...</h3>
    </div>

    <div data-bind="visible: getError() == 404" class="container">
        <h3>That city could not be found, please try again...</h3>
    </div>

    <div data-bind="visible: getError() == 500" class="container">
        <h3>Opps we seem to be having a probem, please try reloading the page
            or enter a different city...
        </h3>
    </div>

    <div data-bind="visible: getError() == null" class="container">

        <h2 data-bind="text: cityName() + ' - ' + countryName()" class="cover-heading"></h2>
        <div class="row">

            <div class="col-md-8">

                <div id="mainWeatherRow" class="row">
                    <div class="col-md-4">
                        <div id="weatherIconContainer">
                            <img data-bind="attr: { src: weatherIcon }" id="wIcon" src="" alt="">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div id="mainWeatherInfo">
                            <div data-bind="text: tempInDeg() + '&deg;C'" id="wTemp"></div>
                            <p data-bind="text: weatherSmallDesc() + ' - ' + weatherLargeDesc()" id="wDesc" class="lead"></p>
                        </div>
                    </div>
                    <div class="pull-right">
                        <button onclick="getWeatherData()" data-toggle="tooltip" data-placement="bottom" title="Refresh weather" type="button" class="btn btn-default">
                            <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                        </button>
                        <p>Last updated: <span data-bind="text: weatherTimeStamp"></span></p>
                    </div>
                </div>

                <div class="row">
                    <!-- <div class="col-md-8"> -->
                    <table id="weatherDataTable" class="table table-condensed">
                        <thead>
                            <tr>
                                <th id="feildCol">Field</th>
                                <th id="statsCol">Stats</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row">Cloud cover</th>
                                <td id="wCloud">
                                    <div class='progress'>
                                        <div data-bind="text: cloudCover() + '%', style: {width: cloudCover() + '%'}" class='progress-bar progress-bar-success' role='progressbar' aria-valuemin='0' aria-valuemax='100'>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Wind (speed | direction)</th>
                                <td data-bind="text: windInfo() + '&deg;'" id="wWind"></td>
                            </tr>
                            <tr>
                                <th scope="row">Pressure</th>
                                <td data-bind="text: pressure() + ' mb'" id="wPressure"></td>
                            </tr>
                            <tr>
                                <th scope="row">Humidity</th>
                                <td id="wHumidity">
                                    <div class='progress'>
                                        <div data-bind="text: humidity() + '%', style: {width: humidity() + '%'}" class='progress-bar' role='progressbar' aria-valuemin='0' aria-valuemax='100'>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <th scope="row">Sunrise</th>
                                <td data-bind="text: sunrise" id="wSunrise"></td>
                            </tr>
                            <tr>
                                <th scope="row">Sunset</th>
                                <td data-bind="text: sunset" id="wSunset"></td>
                            </tr>
                        </tbody>
                    </table>
                    <!-- </div> -->
                </div>

            </div>

            <div class="col-md-4">
                <div id="map-canvas"></div>
            </div>

        </div>

    </div> <!-- /container -->

    <footer class="footer">
        <div class="container">
            {{#userEmail}}
            <p class="text-muted">mbrella</p>
            {{/userEmail}}
            {{^userEmail}}
            <p class="text-muted"><a href="/login">Log in</a> or <a href="/signup">sign up</a> to get started.</p>
            {{/userEmail}}
        </div>
    </footer>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="/javascripts/jquery.min.js"></script>
    <script src="/javascripts/knockout.js"></script>
    <script src="/javascripts/sammy-latest.min.js"></script>
    <script src="/javascripts/bootstrap.js"></script>
    <script src="/javascripts/typeahead.js"></script>
    <script src="/javascripts/typeaheadSettings.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCAUb2FVPgPIAaDqtF0gC0j4Km5xwU8d1w"></script>
    <script type="text/javascript">

    var fiveMinsInMilliseconds = 300000;
    var oneMinInMilliseconds = 60000;

    function WeatherViewModel() {
        var self = this;
        self.getError = ko.observable();
        self.weatherCityId = ko.observable();
        self.cityName = ko.observable();
        self.dateAccessed = ko.observable();
        self.countryName = ko.observable();
        self.icon = ko.observable();
        self.temp = ko.observable();
        self.weatherSmallDesc = ko.observable();
        self.weatherLargeDesc = ko.observable();
        self.cloudCover = ko.observable();
        self.windSpeed = ko.observable();
        self.windDirection = ko.observable();
        self.pressure = ko.observable();
        self.humidity = ko.observable();
        self.sunrise = ko.observable();
        self.sunset = ko.observable();
        self.latitude = ko.observable();
        self.longtitude = ko.observable();

        self.weatherTimeStamp = ko.computed(function(){
            var dateAccessed = new Date(self.dateAccessed());
            return dateAccessed.getHours() + ":" + dateAccessed.getMinutes();
        });

        self.tempInDeg = ko.computed(function() {
            return Math.ceil(self.temp() - 273.15);
        });

        self.weatherIcon = ko.computed(function() {
            return "/images/weatherIcons/" + self.icon() + ".png";
        });

        self.windInfo = ko.computed(function() {
            return self.windSpeed() + " mps | " + self.windDirection();
        });

        Sammy(function() {
            var refreshWeather = null;
            this.get('/#/:cityId', function() {
                self.weatherCityId(this.params.cityId);
                if (refreshWeather) {
                    clearInterval(refreshWeather);
                }
                getWeatherData(this.params.cityId);
                refreshWeather = setInterval(getWeatherData, fiveMinsInMilliseconds);
            });
            this.get('#/', function() {
                self.getError(0);
                console.warn("Empty hash parameter detected");
            });
            this.get('/weather/', function() {
                self.getError(0);
                console.warn("Empty hash parameter detected");
            });
            this.get('/weather', function() {
                self.getError(0);
                console.warn("Empty hash parameter detected");
            });
        }).run();
    }

    var wvm = new WeatherViewModel();
    ko.applyBindings(wvm, document.getElementById("html-all"));

    $(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });

    function getWeatherData(cityId) {
        var cityIdToGet = cityId || wvm.weatherCityId();
        $.getJSON("/getWeather/" + cityIdToGet, function(data) {
            if (data) {
                var dateAccessesd = getTimeZoneDate(data.dateret);
                console.info("Weather data for " + data.name + " accessed at " +
                dateAccessesd.toUTCString());

                if (data.dateret !== wvm.dateAccessed()) {
                    console.info("Weather data has changed, updating UI...");
                    //TODO: Max and min temps shown elsewhere
                    wvm.getError(null);
                    wvm.dateAccessed(data.dateret);
                    wvm.cityName(data.name);
                    wvm.countryName(data.sys.country.countryName);
                    wvm.temp(data.main.temp);
                    wvm.icon(data.weather[0].icon);
                    wvm.weatherSmallDesc(data.weather[0].main);
                    wvm.weatherLargeDesc(data.weather[0].description);
                    wvm.cloudCover(data.clouds.all);
                    wvm.windSpeed(data.wind.speed);
                    wvm.windDirection(data.wind.deg);
                    wvm.pressure(data.main.pressure);
                    wvm.humidity(data.main.humidity);
                    wvm.sunrise(getDate(data.sys.sunrise));
                    wvm.sunset(getDate(data.sys.sunset));
                    gMapInitialize(data.coord.lat, data.coord.lon);
                } else {
                    console.info("Weather data unchanged, skipping UI updating.");
                }

            } else {
                wvm.getError(0);
                console.error("HTTP GET error: Unable to get weather data.");
            }
        }).fail(function(jqxhr, textStatus, error) {
            wvm.getError(jqxhr.status);
            console.error( "Error: " + jqxhr.status + " " + error +
            ":\n" + jqxhr.responseText);
        });
    }

    function getDate(unixUTC) {
        var date = new Date(parseInt(unixUTC)*1000);
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        return hours + ':' + minutes + " GMT";
    }

    function getTimeZoneDate(ISOdate) {
        var givenDate = new Date(ISOdate);
        var givenDateOffset = givenDate.getTimezoneOffset();
        var dateExpandedWithOffset = 0;
        if (givenDateOffset < 0) {
            dateExpandedWithOffset = givenDate.getTime() +
            Math.abs(givenDate.getTimezoneOffset())*oneMinInMilliseconds;
        } else {
            dateExpandedWithOffset = givenDate.getTime() -
            Math.abs(givenDate.getTimezoneOffset())*oneMinInMilliseconds;
        }
        return new Date(dateExpandedWithOffset);
    }

    function getWindChill(temp, windSpeed){
        return 13.12 + 0.6215*temp + ((windSpeed*3.6)^(0.16))*(0.3965*temp - 11.37);
    }

    function gMapInitialize(lat, lon) {
        var cityLatlng = new google.maps.LatLng(lat, lon);
        var mapOptions = {
            center: cityLatlng,
            zoom: 8,
            draggable: false
        };
        var map = new google.maps.Map(document.getElementById('map-canvas'),
        mapOptions);
        var marker = new google.maps.Marker({
            position: cityLatlng,
            map: map,
            title: 'City'
        });
    }

    </script>
</body>
</html>
